{{>licenseInfo}}

import * as api from "./api"
import { Configuration } from "./configuration"
import { PactV3, MatchersV3 } from "@pact-foundation/pact";

const config: Configuration = {}

const {
  eachLike,
  atLeastLike,
  integer,
  datetime,
  boolean,
  string,
  regex,
  like,
  eachKeyLike,
} = MatchersV3;

{{#apiInfo}}
{{#apis}}
{{#operations}}
describe("{{classname}}", () => {

  let instance: api.{{classname}}
  
  const provider = new PactV3({
  consumer: "{{classname}}-consumer",
  provider: "{{classname}}",
  });


{{#operation}}
{{#contents}}
{{#@first}}
  test("{{operationId}}", () => {

    {{#parameters}}
    {{#isObject}}
    const {{{paramName}}}: { [key:string]: api.{{{dataType}}} } = {{>api_test_default_value}}
    {{/isObject}}
    {{^isObject}}
    {{#hasInnerObject}}
    const {{{paramName}}}: Array<api.{{{baseType}}}> = {{>api_test_default_value}}
    {{/hasInnerObject}}
    {{^hasInnerObject}}
    const {{{paramName}}}: {{{dataType}}} = {{>api_test_default_value}}
    {{/hasInnerObject}}
    {{/isObject}}
    {{/parameters}}
    provider
      .given("{{operationId}} is available on {{classname}} service")
      .uponReceiving("A {{httpMethod}} request for {{operationId}}")
      .withRequest({
        method: "{{httpMethod}}",
        path: {{#parameters}}{{#isObject}}"{{{path}}}"{{/isObject}}{{^isObject}} `{{path}}`.replace(`{ {{paramName}} }`.replace(/\s/g, ''),{{paramName}}){{/isObject}}{{/parameters}}{{^parameters}}"{{{path}}}"{{/parameters}},
        {{#consumes}}contentType: "{{{mediaType}}}",{{/consumes}}
        {{#parameters}}
        {{#isObject}}
        {{{paramName}}}: {{paramName}}.value,
        {{/isObject}}
        {{/parameters}}
      })
      .willRespondWith({
        {{#responses}}{{#dataType}}
        status: {{code}},
        body: {{#examples}}{{{example}}}{{/examples}},
        {{#produces}}contentType: "{{{mediaType}}}",{{/produces}}
        {{/dataType}}{{/responses}}

      });
    return provider.executeTest(async(mockserver) => {
      instance = new api.{{classname}}(config,mockserver.url)
      const result = await instance.{{operationId}}({{#parameters}} {{#isObject}}{{{paramName}}}.value{{/isObject}}{{#isString}}{{{paramName}}}{{/isString}}, {{/parameters}}{})
      expect(result).toEqual({{#responses}}{{#dataType}}{{#examples}}{{{example}}}{{/examples}}{{/dataType}}{{/responses}})
    });
  })
{{/@first}}
{{/contents}}
{{/operation}}
})

{{/operations}}
{{/apis}}
{{/apiInfo}}